import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { 
  Check, 
  X, 
  Edit, 
  MoreHorizontal, 
  Flag, 
  Search, 
  Eye, 
  Shield, 
  Clock, 
  Settings,
  Filter,
  Download,
  Upload,
  Copy,
  Trash2,
  Plus,
  Minus,
  ChevronDown,
  ChevronUp,
  AlertCircle,
  Info,
  Users,
  Star,
  Zap,
  Database,
  Globe,
  Folder,
  File,
  User,
  Key,
  Lock,
  Unlock,
  Share2,
  Wrench
} from "lucide-react"

import { cn } from "../lib/utils"
import { Button } from "./button"
import { Badge } from "./badge"
import { Input } from "./input"
import { Label } from "./label"
import { Textarea } from "./textarea"
import { Checkbox } from "./checkbox"
import { RadioGroup, RadioGroupItem } from "./radio-group"
import { Switch } from "./switch"
import { Separator } from "./separator"
import { Skeleton } from "./skeleton"
import { Progress } from "./progress"
import { ScrollArea } from "./scroll-area"
import { Slider } from "./slider"
import { Avatar, AvatarFallback, AvatarImage } from "./avatar"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "./card"
import { Alert, AlertDescription, AlertTitle } from "./alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./tabs"
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "./accordion"
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from "./collapsible"
import { Toggle } from "./toggle"
import { Toaster } from "./sonner"
import { toast } from "../hooks/use-toast"
import { useToast } from "../hooks/use-toast"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuRadioGroup,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuShortcut,
} from "./dropdown-menu"
import {
  ContextMenu,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuTrigger,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuRadioGroup,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuShortcut,
} from "./context-menu"
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from "./hover-card"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./tooltip"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "./dialog"
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "./alert-dialog"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "./sheet"
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "./form"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./select"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "./command"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "./table"

// Enhanced types for the enterprise AccessMatrix

export type UserRole = 'admin' | 'manager' | 'user' | 'guest' | string
export type PermissionLevel = 'read' | 'write' | 'admin' | 'none'

export interface UserContext {
  role: UserRole
  userId: string
  permissions: string[]
  canEdit?: (rowId: string, columnId: string) => boolean
  canDelete?: (rowId: string) => boolean
  canView?: (rowId: string, columnId: string) => boolean
}

export interface CustomRule {
  id: string
  name: string
  description?: string
  type: 'time-based' | 'conditional' | 'complex' | 'inherited'
  condition?: string
  effect: 'allow' | 'deny' | 'custom'
  metadata?: Record<string, any>
  createdBy?: string
  createdAt?: Date
  expiresAt?: Date
}

export interface AccessMatrixCellEnhanced {
  value: string
  customRule?: CustomRule
  metadata?: Record<string, any>
  isLoading?: boolean
  isError?: boolean
  isSelected?: boolean
  lastModified?: Date
  modifiedBy?: string
  reason?: string
}

export interface AccessMatrixRowEnhanced {
  id: string
  label: string
  description?: string
  userRole?: UserRole
  canEdit?: boolean
  canDelete?: boolean
  canView?: boolean
  editableBy?: UserRole[]
  metadata?: Record<string, any>
  avatar?: string
  status?: 'active' | 'inactive' | 'locked' | 'pending'
}

export interface AccessMatrixDataEnhanced {
  rows: AccessMatrixRowEnhanced[]
  columns: {
    id: string
    label: string
    description?: string
    category?: string
    required?: boolean
    metadata?: Record<string, any>
  }[]
  cells: Record<string, Record<string, AccessMatrixCellEnhanced>>
  metadata?: {
    version?: string
    lastModified?: Date
    modifiedBy?: string
    auditLog?: MatrixChangeLog[]
  }
}

export interface MatrixChangeLog {
  id: string
  timestamp: Date
  userId: string
  action: 'create' | 'update' | 'delete' | 'bulk_update'
  rowId: string
  columnId?: string
  oldValue?: string
  newValue?: string
  reason?: string
  metadata?: Record<string, any>
}

export interface MatrixDataSource {
  // Core data operations
  getData(): Promise<AccessMatrixDataEnhanced>
  updateCell(rowId: string, columnId: string, value: string, reason?: string): Promise<void>
  bulkUpdate(changes: Array<{rowId: string, columnId: string, value: string, reason?: string}>): Promise<void>
  
  // Custom rule operations
  getCustomRule(ruleId: string): Promise<CustomRule>
  createCustomRule(rule: Omit<CustomRule, 'id'>): Promise<CustomRule>
  updateCustomRule(ruleId: string, rule: Partial<CustomRule>): Promise<void>
  deleteCustomRule(ruleId: string): Promise<void>
  
  // Validation and permissions
  validateChange(rowId: string, columnId: string, value: string, user: UserContext): Promise<ValidationResult>
  
  // Real-time updates
  subscribe?(callback: (change: MatrixChangeLog) => void): () => void
  
  // Search and filtering
  search?(query: string): Promise<AccessMatrixDataEnhanced>
  filter?(filters: Record<string, any>): Promise<AccessMatrixDataEnhanced>
}

export interface ValidationResult {
  valid: boolean
  errors?: string[]
  warnings?: string[]
  requiresConfirmation?: boolean
  confirmationMessage?: string
}

export interface SelectionState {
  selectedCells: Set<string>
  anchorCell?: string
  isMultiSelect: boolean
  lastSelectedCell?: string
}

export interface ConfirmationConfig {
  title?: string
  description?: string
  confirmText?: string
  cancelText?: string
  variant?: 'default' | 'destructive'
  requiresReason?: boolean
  reasonPlaceholder?: string
}

export interface AccessMatrixEnhancedProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof accessMatrixVariants> {
  
  // Core data
  data: AccessMatrixDataEnhanced
  dataSource?: MatrixDataSource
  
  // User context and permissions
  currentUser?: UserContext
  
  // Permissions and validation
  permissions?: PermissionType[]
  onCellChange?: (rowId: string, columnId: string, value: string, reason?: string) => void
  onBulkChange?: (changes: Array<{rowId: string, columnId: string, value: string, reason?: string}>) => void
  
  // Selection and interaction
  selectionMode?: 'none' | 'single' | 'multiple'
  onSelectionChange?: (selection: SelectionState) => void
  
  // Custom rules
  onCustomRuleEdit?: (rule: CustomRule) => void
  onCustomRuleCreate?: (rowId: string, columnId: string) => void
  
  // Search and filtering
  searchable?: boolean
  searchPlaceholder?: string
  onSearch?: (query: string) => void
  
  // Confirmation and validation
  confirmationConfig?: Record<string, ConfirmationConfig>
  validateChange?: (rowId: string, columnId: string, value: string) => Promise<ValidationResult>
  
  // Real-time updates
  enableRealTime?: boolean
  
  // Loading and error states
  isLoading?: boolean
  loadingRows?: Set<string>
  loadingCells?: Set<string>
  errorCells?: Set<string>
  
  // Styling and display
  size?: "xs" | "sm" | "default" | "lg" | "xl"
  variant?: "default" | "bordered" | "shadow" | "striped" | "compact"
  density?: "compact" | "comfortable" | "spacious"
  displayMode?: "icon" | "text" | "both"
  
  // Advanced features
  showAuditLog?: boolean
  showCustomRules?: boolean
  enableBulkOperations?: boolean
  enableExport?: boolean
  
  // Accessibility
  ariaLabel?: string
  ariaDescription?: string
}

// Enhanced variants
const accessMatrixVariants = cva(
  "w-full relative bg-background rounded-lg border",
  {
    variants: {
      size: {
        xs: "text-xs",
        sm: "text-sm",
        default: "text-base",
        lg: "text-lg",
        xl: "text-xl",
      },
      variant: {
        default: "border-border",
        bordered: "border-2 border-primary/20 shadow-md bg-card/50",
        shadow: "shadow-lg border-border/30 bg-gradient-to-br from-background to-muted/30",
        striped: "border-border [&_tbody_tr:nth-child(odd)]:bg-accent/30",
        compact: "border-2 border-muted bg-muted/20",
      },
      density: {
        compact: "[&_td]:p-1 [&_th]:p-1",
        comfortable: "[&_td]:p-3 [&_th]:p-3",
        spacious: "[&_td]:p-6 [&_th]:p-6",
      },
    },
    defaultVariants: {
      size: "default",
      variant: "default",
      density: "comfortable",
    },
  }
)

export interface PermissionType {
  value: string
  label: string
  icon?: React.ReactNode
  variant?: "default" | "success" | "destructive" | "warning" | "info" | "outline"
  description?: string
  metadata?: Record<string, any>
}

// Selection hook
const useMatrixSelection = (
  initialSelection: SelectionState = {
    selectedCells: new Set(),
    isMultiSelect: false,
  }
) => {
  const [selection, setSelection] = React.useState<SelectionState>(initialSelection)
  
  const handleCellClick = React.useCallback((
    cellId: string,
    event: React.MouseEvent,
    rowId: string,
    columnId: string
  ) => {
    const isShiftClick = event.shiftKey
    const isCtrlClick = event.ctrlKey || event.metaKey
    
    setSelection(prev => {
      const newSelection = { ...prev }
      
      if (isShiftClick && prev.anchorCell) {
        // Range selection - would need to implement range calculation
        newSelection.isMultiSelect = true
        // This would need actual range selection logic
      } else if (isCtrlClick) {
        // Multi-select
        newSelection.isMultiSelect = true
        if (prev.selectedCells.has(cellId)) {
          newSelection.selectedCells.delete(cellId)
        } else {
          newSelection.selectedCells.add(cellId)
        }
      } else {
        // Single select
        newSelection.selectedCells = new Set([cellId])
        newSelection.isMultiSelect = false
        newSelection.anchorCell = cellId
      }
      
      newSelection.lastSelectedCell = cellId
      return newSelection
    })
  }, [])
  
  const clearSelection = React.useCallback(() => {
    setSelection({
      selectedCells: new Set(),
      isMultiSelect: false,
    })
  }, [])
  
  const selectAll = React.useCallback((cellIds: string[]) => {
    setSelection({
      selectedCells: new Set(cellIds),
      isMultiSelect: true,
    })
  }, [])
  
  return {
    selection,
    handleCellClick,
    clearSelection,
    selectAll,
    setSelection,
  }
}

// Custom rule modal component
const CustomRuleModal = ({ 
  rule, 
  onSave, 
  onClose, 
  isOpen 
}: {
  rule?: CustomRule
  onSave: (rule: CustomRule) => void
  onClose: () => void
  isOpen: boolean
}) => {
  const [formData, setFormData] = React.useState<Partial<CustomRule>>(
    rule || {
      name: '',
      description: '',
      type: 'conditional',
      effect: 'allow',
      condition: '',
    }
  )
  
  const handleSave = () => {
    if (formData.name && formData.type && formData.effect) {
      onSave({
        id: rule?.id || crypto.randomUUID(),
        name: formData.name,
        description: formData.description,
        type: formData.type as CustomRule['type'],
        effect: formData.effect as CustomRule['effect'],
        condition: formData.condition,
        metadata: formData.metadata,
        createdAt: rule?.createdAt || new Date(),
      })
      onClose()
    }
  }
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle>
            {rule ? 'Edit Custom Rule' : 'Create Custom Rule'}
          </DialogTitle>
          <DialogDescription>
            Define custom permission rules with conditions and effects.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="name" className="text-right">
              Name
            </Label>
            <Input
              id="name"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="description" className="text-right">
              Description
            </Label>
            <Textarea
              id="description"
              value={formData.description}
              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
              className="col-span-3"
            />
          </div>
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="condition" className="text-right">
              Condition
            </Label>
            <Input
              id="condition"
              value={formData.condition}
              onChange={(e) => setFormData(prev => ({ ...prev, condition: e.target.value }))}
              className="col-span-3"
              placeholder="e.g., user.role === 'admin'"
            />
          </div>
        </div>
        <div className="flex justify-end space-x-2">
          <Button variant="outline" onClick={onClose}>
            Cancel
          </Button>
          <Button onClick={handleSave}>
            {rule ? 'Update' : 'Create'}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  )
}

// Enhanced matrix cell component
const EnhancedMatrixCell = ({
  cell,
  rowId,
  columnId,
  permission,
  currentUser,
  onCellClick,
  onCustomRuleEdit,
  onContextMenu,
  isSelected,
  displayMode = "both",
  size = "default",
}: {
  cell: AccessMatrixCellEnhanced
  rowId: string
  columnId: string
  permission?: PermissionType
  currentUser?: UserContext
  onCellClick: (event: React.MouseEvent) => void
  onCustomRuleEdit?: (rule: CustomRule) => void
  onContextMenu?: (event: React.MouseEvent) => void
  isSelected?: boolean
  displayMode?: "icon" | "text" | "both"
  size?: "xs" | "sm" | "default" | "lg" | "xl"
}) => {
  const cellId = `${rowId}-${columnId}`
  const canEdit = currentUser?.canEdit?.(rowId, columnId) ?? true
  const canView = currentUser?.canView?.(rowId, columnId) ?? true
  
  if (!canView) {
    return (
      <TableCell className="text-center">
        <div className="flex items-center justify-center">
          <Eye className="h-4 w-4 text-muted-foreground" />
        </div>
      </TableCell>
    )
  }
  
  if (cell.isLoading) {
    return (
      <TableCell className="text-center">
        <Skeleton className="h-8 w-16 mx-auto" />
      </TableCell>
    )
  }
  
  const cellContent = (
    <div className="relative">
      {cell.customRule && (
        <Badge
          variant="outline"
          className="absolute -top-1 -right-1 h-3 w-3 p-0 cursor-pointer"
          onClick={(e) => {
            e.stopPropagation()
            if (cell.customRule && onCustomRuleEdit) {
              onCustomRuleEdit(cell.customRule)
            }
          }}
        >
          <Flag className="h-2 w-2" />
        </Badge>
      )}
      
      <HoverCard>
        <HoverCardTrigger asChild>
          <Button
            variant="ghost"
            className={cn(
              "h-8 w-16 p-1 transition-all duration-200",
              isSelected && "ring-2 ring-ring ring-offset-2",
              cell.isError && "bg-destructive/10 text-destructive",
              !canEdit && "cursor-not-allowed opacity-50"
            )}
            onClick={canEdit ? onCellClick : undefined}
            disabled={!canEdit}
          >
            {displayMode === "icon" && permission?.icon}
            {displayMode === "text" && permission?.label}
            {displayMode === "both" && (
              <div className="flex items-center gap-1">
                {permission?.icon}
                <span className="text-xs">{permission?.label}</span>
              </div>
            )}
          </Button>
        </HoverCardTrigger>
        <HoverCardContent className="w-64">
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Badge variant="outline">{permission?.label}</Badge>
              {cell.customRule && (
                <Badge variant="secondary">
                  <Flag className="h-3 w-3 mr-1" />
                  Custom Rule
                </Badge>
              )}
            </div>
            <p className="text-sm text-muted-foreground">
              Permission: {permission?.label}
            </p>
            {cell.customRule && (
              <p className="text-sm text-muted-foreground">
                Rule: {cell.customRule.name}
              </p>
            )}
            {cell.lastModified && (
              <p className="text-xs text-muted-foreground">
                Modified: {cell.lastModified.toLocaleDateString()}
              </p>
            )}
            {cell.reason && (
              <p className="text-xs text-muted-foreground">
                Reason: {cell.reason}
              </p>
            )}
          </div>
        </HoverCardContent>
      </HoverCard>
    </div>
  )
  
  return (
    <ContextMenu>
      <ContextMenuTrigger asChild>
        <TableCell className="text-center">
          {cellContent}
        </TableCell>
      </ContextMenuTrigger>
      <ContextMenuContent>
        <ContextMenuItem onClick={() => onCellClick({} as React.MouseEvent)}>
          <Edit className="h-4 w-4 mr-2" />
          Edit Permission
        </ContextMenuItem>
        {cell.customRule && (
          <ContextMenuItem onClick={() => cell.customRule && onCustomRuleEdit?.(cell.customRule)}>
            <Settings className="h-4 w-4 mr-2" />
            Edit Custom Rule
          </ContextMenuItem>
        )}
        <ContextMenuItem onClick={() => onContextMenu?.({} as React.MouseEvent)}>
          <Flag className="h-4 w-4 mr-2" />
          Create Custom Rule
        </ContextMenuItem>
      </ContextMenuContent>
    </ContextMenu>
  )
}

// Main enhanced AccessMatrix component with all new shadcn/ui features
export const AccessMatrixEnhanced = React.forwardRef<HTMLDivElement, AccessMatrixEnhancedProps>(
  ({
    data,
    dataSource,
    currentUser,
    permissions = [],
    onCellChange,
    onBulkChange,
    selectionMode = "none",
    onSelectionChange,
    onCustomRuleEdit,
    onCustomRuleCreate,
    searchable = false,
    searchPlaceholder = "Search matrix...",
    onSearch,
    confirmationConfig = {},
    validateChange,
    enableRealTime = false,
    isLoading = false,
    loadingRows = new Set(),
    loadingCells = new Set(),
    errorCells = new Set(),
    size = "default",
    variant = "default",
    density = "comfortable",
    displayMode = "both",
    showAuditLog = false,
    showCustomRules = false,
    enableBulkOperations = false,
    enableExport = false,
    ariaLabel = "Access Matrix",
    ariaDescription,
    className,
    ...props
  }, ref) => {
    const { toast } = useToast()
    const [searchQuery, setSearchQuery] = React.useState("")
    const [selectedCustomRule, setSelectedCustomRule] = React.useState<CustomRule | null>(null)
    const [showCustomRuleModal, setShowCustomRuleModal] = React.useState(false)
    const [showBulkPanel, setShowBulkPanel] = React.useState(false)
    const [showExportPanel, setShowExportPanel] = React.useState(false)
    const [showSettingsPanel, setShowSettingsPanel] = React.useState(false)
    const [showAuditPanel, setShowAuditPanel] = React.useState(false)
    const [filters, setFilters] = React.useState<Record<string, any>>({})
    const [sortConfig, setSortConfig] = React.useState<{ key: string; direction: "asc" | "desc" } | null>(null)
    
    const {
      selection,
      handleCellClick,
      clearSelection,
      selectAll,
      setSelection,
    } = useMatrixSelection()
    
    // Filter and search data
    const filteredData = React.useMemo(() => {
      let filtered = { ...data }
      
      // Apply search filter
      if (searchQuery) {
        filtered.rows = filtered.rows.filter(row => 
          row.label.toLowerCase().includes(searchQuery.toLowerCase()) ||
          row.description?.toLowerCase().includes(searchQuery.toLowerCase())
        )
      }
      
      // Apply other filters
      if (filters.status) {
        filtered.rows = filtered.rows.filter(row => row.status === filters.status)
      }
      
      if (filters.userRole) {
        filtered.rows = filtered.rows.filter(row => row.userRole === filters.userRole)
      }
      
      return filtered
    }, [data, searchQuery, filters])
    
    // Enhanced toolbar with all new components
    const renderToolbar = () => (
      <div className="flex items-center justify-between p-4 border-b bg-muted/30">
        <div className="flex items-center gap-4">
          {/* Search */}
          {searchable && (
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder={searchPlaceholder}
                value={searchQuery}
                onChange={(e) => {
                  setSearchQuery(e.target.value)
                  onSearch?.(e.target.value)
                }}
                className="pl-10 w-64"
              />
            </div>
          )}
          
          {/* Filters */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="gap-2">
                <Filter className="h-4 w-4" />
                Filters
                {Object.keys(filters).length > 0 && (
                  <Badge variant="secondary" className="ml-1">
                    {Object.keys(filters).length}
                  </Badge>
                )}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>Status</DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuRadioGroup value={filters.status} onValueChange={(value) => setFilters(prev => ({ ...prev, status: value }))}>
                    <DropdownMenuRadioItem value="">All</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="active">Active</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="inactive">Inactive</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="locked">Locked</DropdownMenuRadioItem>
                  </DropdownMenuRadioGroup>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
              <DropdownMenuSub>
                <DropdownMenuSubTrigger>Role</DropdownMenuSubTrigger>
                <DropdownMenuSubContent>
                  <DropdownMenuRadioGroup value={filters.userRole} onValueChange={(value) => setFilters(prev => ({ ...prev, userRole: value }))}>
                    <DropdownMenuRadioItem value="">All</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="admin">Admin</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="manager">Manager</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value="user">User</DropdownMenuRadioItem>
                  </DropdownMenuRadioGroup>
                </DropdownMenuSubContent>
              </DropdownMenuSub>
            </DropdownMenuContent>
          </DropdownMenu>
          
          {/* Selection info */}
          {selection.selectedCells.size > 0 && (
            <Badge variant="secondary" className="gap-1">
              <span>{selection.selectedCells.size} selected</span>
              <Button
                variant="ghost"
                size="sm"
                className="h-4 w-4 p-0"
                onClick={clearSelection}
              >
                <X className="h-3 w-3" />
              </Button>
            </Badge>
          )}
        </div>
        
        <div className="flex items-center gap-2">
          {/* Bulk Actions */}
          {enableBulkOperations && selection.selectedCells.size > 0 && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2">
                  <Wrench className="h-4 w-4" />
                  Bulk Actions
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => {
                  // Bulk allow logic
                  toast({ title: "Bulk Allow", description: `Applied to ${selection.selectedCells.size} cells` })
                }}>
                  <Check className="h-4 w-4 mr-2" />
                  Allow Selected
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => {
                  // Bulk deny logic
                  toast({ title: "Bulk Deny", description: `Applied to ${selection.selectedCells.size} cells` })
                }}>
                  <X className="h-4 w-4 mr-2" />
                  Deny Selected
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => {
                  // Bulk inherit logic
                  toast({ title: "Bulk Inherit", description: `Applied to ${selection.selectedCells.size} cells` })
                }}>
                  <Share2 className="h-4 w-4 mr-2" />
                  Inherit Selected
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
          
          {/* Export */}
          {enableExport && (
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2">
                  <Download className="h-4 w-4" />
                  Export
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem onClick={() => toast({ title: "Export", description: "Exporting as JSON..." })}>
                  <File className="h-4 w-4 mr-2" />
                  Export as JSON
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => toast({ title: "Export", description: "Exporting as CSV..." })}>
                  <Database className="h-4 w-4 mr-2" />
                  Export as CSV
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => toast({ title: "Export", description: "Exporting as Excel..." })}>
                  <Folder className="h-4 w-4 mr-2" />
                  Export as Excel
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          )}
          
          {/* Settings */}
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowSettingsPanel(true)}
            className="gap-2"
          >
            <Settings className="h-4 w-4" />
            Settings
          </Button>
          
          {/* Audit Log */}
          {showAuditLog && (
            <Button
              variant="outline"
              size="sm"
              onClick={() => setShowAuditPanel(true)}
              className="gap-2"
            >
              <Clock className="h-4 w-4" />
              Audit Log
            </Button>
          )}
        </div>
      </div>
    )
    
    if (isLoading) {
      return (
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Skeleton className="h-10 w-64" />
            <Skeleton className="h-10 w-32" />
          </div>
          <div className="space-y-2">
            {Array.from({ length: 5 }).map((_, i) => (
              <div key={i} className="flex items-center gap-4">
                <Skeleton className="h-12 w-40" />
                {Array.from({ length: 6 }).map((_, j) => (
                  <Skeleton key={j} className="h-12 w-20" />
                ))}
              </div>
            ))}
          </div>
        </div>
      )
    }
    
    return (
      <TooltipProvider>
        <div
          ref={ref}
          className={cn(accessMatrixVariants({ size, variant, density }), className)}
          role="grid"
          aria-label={ariaLabel}
          aria-description={ariaDescription}
          {...props}
        >
          {/* Enhanced Toolbar */}
          {renderToolbar()}
          
          {/* Real-time indicator */}
          {enableRealTime && (
            <div className="flex items-center gap-2 p-2 bg-green-50 dark:bg-green-900/20 border-b">
              <div className="h-2 w-2 bg-green-500 rounded-full animate-pulse" />
              <span className="text-sm text-green-700 dark:text-green-400">Real-time updates enabled</span>
            </div>
          )}
          
          {/* Main Table */}
          <div className="overflow-auto">
            <Table>
              <TableHeader>
                <TableRow>
                  {/* Selection column */}
                  {selectionMode === "multiple" && (
                    <TableHead className="w-12">
                      <Checkbox
                        checked={selection.selectedCells.size > 0}
                        onCheckedChange={(checked) => {
                          if (checked) {
                            const allCells = filteredData.rows.flatMap(row => 
                              filteredData.columns.map(col => `${row.id}-${col.id}`)
                            )
                            selectAll(allCells)
                          } else {
                            clearSelection()
                          }
                        }}
                      />
                    </TableHead>
                  )}
                  
                  {/* Row header */}
                  <TableHead className="font-semibold sticky left-0 bg-background z-10">
                    Resources
                  </TableHead>
                  
                  {/* Column headers */}
                  {filteredData.columns.map((column) => (
                    <TableHead key={column.id} className="text-center border-l">
                      <div className="flex items-center justify-center gap-2">
                        <span>{column.label}</span>
                        {column.required && <span className="text-red-500">*</span>}
                        <Button
                          variant="ghost"
                          size="sm"
                          className="h-6 w-6 p-0"
                          onClick={() => {
                            const direction = sortConfig?.key === column.id && sortConfig.direction === "asc" ? "desc" : "asc"
                            setSortConfig({ key: column.id, direction })
                          }}
                        >
                          {sortConfig?.key === column.id ? (
                            sortConfig.direction === "asc" ? (
                              <ChevronUp className="h-3 w-3" />
                            ) : (
                              <ChevronDown className="h-3 w-3" />
                            )
                          ) : (
                            <ChevronDown className="h-3 w-3 opacity-50" />
                          )}
                        </Button>
                      </div>
                    </TableHead>
                  ))}
                </TableRow>
              </TableHeader>
              
              <TableBody>
                {filteredData.rows.map((row) => (
                  <TableRow key={row.id} className="group">
                    {/* Selection checkbox */}
                    {selectionMode === "multiple" && (
                      <TableCell className="w-12">
                        <Checkbox />
                      </TableCell>
                    )}
                    
                    {/* Row header */}
                    <TableCell className="font-medium sticky left-0 bg-background z-10">
                      <div className="flex items-center gap-3">
                        {row.avatar && (
                          <Avatar className="h-6 w-6">
                            <AvatarImage src={row.avatar} />
                            <AvatarFallback>{row.label.charAt(0)}</AvatarFallback>
                          </Avatar>
                        )}
                        <div className="flex-1">
                          <div className="flex items-center gap-2">
                            <span>{row.label}</span>
                            {row.status === "locked" && <Lock className="h-3 w-3 text-muted-foreground" />}
                            {row.status === "inactive" && <Eye className="h-3 w-3 text-muted-foreground" />}
                          </div>
                          {row.description && (
                            <p className="text-xs text-muted-foreground mt-1">{row.description}</p>
                          )}
                        </div>
                      </div>
                    </TableCell>
                    
                    {/* Cells */}
                    {filteredData.columns.map((column) => {
                      const cell = filteredData.cells[row.id]?.[column.id]
                      const cellId = `${row.id}-${column.id}`
                      const isSelected = selection.selectedCells.has(cellId)
                      const isLoadingCell = loadingCells.has(cellId)
                      const isErrorCell = errorCells.has(cellId)
                      
                      return (
                        <EnhancedMatrixCell
                          key={column.id}
                          cell={cell || { value: "inherit" }}
                          rowId={row.id}
                          columnId={column.id}
                          permission={permissions.find(p => p.value === cell?.value)}
                          currentUser={currentUser}
                          isSelected={isSelected}
                          displayMode={displayMode}
                          size={size}
                          onCellClick={(event) => {
                            handleCellClick(cellId, event, row.id, column.id)
                            onCellChange?.(row.id, column.id, cell?.value || "inherit")
                          }}
                          onCustomRuleEdit={(rule) => {
                            setSelectedCustomRule(rule)
                            setShowCustomRuleModal(true)
                          }}
                          onContextMenu={(event) => {
                            onCustomRuleCreate?.(row.id, column.id)
                          }}
                        />
                      )
                    })}
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
          
          {/* Custom Rule Modal */}
          <CustomRuleModal
            rule={selectedCustomRule}
            isOpen={showCustomRuleModal}
            onClose={() => {
              setShowCustomRuleModal(false)
              setSelectedCustomRule(null)
            }}
            onSave={(rule) => {
              onCustomRuleEdit?.(rule)
              toast({ title: "Custom Rule", description: "Rule saved successfully" })
            }}
          />
          
          {/* Settings Panel */}
          <Sheet open={showSettingsPanel} onOpenChange={setShowSettingsPanel}>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>Matrix Settings</SheetTitle>
                <SheetDescription>
                  Customize the appearance and behavior of the access matrix.
                </SheetDescription>
              </SheetHeader>
              <div className="space-y-6 mt-6">
                <div className="space-y-4">
                  <h4 className="font-medium">Appearance</h4>
                  <div className="space-y-2">
                    <Label>Size</Label>
                    <Select value={size}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="xs">Extra Small</SelectItem>
                        <SelectItem value="sm">Small</SelectItem>
                        <SelectItem value="default">Default</SelectItem>
                        <SelectItem value="lg">Large</SelectItem>
                        <SelectItem value="xl">Extra Large</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label>Density</Label>
                    <RadioGroup value={density}>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="compact" id="compact" />
                        <Label htmlFor="compact">Compact</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="comfortable" id="comfortable" />
                        <Label htmlFor="comfortable">Comfortable</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <RadioGroupItem value="spacious" id="spacious" />
                        <Label htmlFor="spacious">Spacious</Label>
                      </div>
                    </RadioGroup>
                  </div>
                </div>
                
                <Separator />
                
                <div className="space-y-4">
                  <h4 className="font-medium">Features</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <Label htmlFor="real-time">Real-time Updates</Label>
                      <Switch id="real-time" checked={enableRealTime} />
                    </div>
                    <div className="flex items-center justify-between">
                      <Label htmlFor="bulk-ops">Bulk Operations</Label>
                      <Switch id="bulk-ops" checked={enableBulkOperations} />
                    </div>
                    <div className="flex items-center justify-between">
                      <Label htmlFor="audit-log">Audit Log</Label>
                      <Switch id="audit-log" checked={showAuditLog} />
                    </div>
                    <div className="flex items-center justify-between">
                      <Label htmlFor="custom-rules">Custom Rules</Label>
                      <Switch id="custom-rules" checked={showCustomRules} />
                    </div>
                  </div>
                </div>
              </div>
            </SheetContent>
          </Sheet>
          
          {/* Audit Panel */}
          <Sheet open={showAuditPanel} onOpenChange={setShowAuditPanel}>
            <SheetContent>
              <SheetHeader>
                <SheetTitle>Audit Log</SheetTitle>
                <SheetDescription>
                  View the history of changes made to the access matrix.
                </SheetDescription>
              </SheetHeader>
              <div className="space-y-4 mt-6">
                {data.metadata?.auditLog?.map((entry, index) => (
                  <Card key={entry.id}>
                    <CardHeader className="pb-2">
                      <div className="flex items-center justify-between">
                        <CardTitle className="text-sm">{entry.action}</CardTitle>
                        <Badge variant="outline">{entry.timestamp.toLocaleDateString()}</Badge>
                      </div>
                    </CardHeader>
                    <CardContent>
                      <p className="text-sm text-muted-foreground">User: {entry.userId}</p>
                      <p className="text-sm text-muted-foreground">Row: {entry.rowId}</p>
                      {entry.columnId && <p className="text-sm text-muted-foreground">Column: {entry.columnId}</p>}
                      {entry.oldValue && <p className="text-sm text-muted-foreground">Old: {entry.oldValue}</p>}
                      {entry.newValue && <p className="text-sm text-muted-foreground">New: {entry.newValue}</p>}
                      {entry.reason && <p className="text-sm text-muted-foreground">Reason: {entry.reason}</p>}
                    </CardContent>
                  </Card>
                ))}
              </div>
            </SheetContent>
          </Sheet>
        </div>
      </TooltipProvider>
    )
  }
)

AccessMatrixEnhanced.displayName = "AccessMatrixEnhanced"

export { accessMatrixVariants, EnhancedMatrixCell, CustomRuleModal, useMatrixSelection }